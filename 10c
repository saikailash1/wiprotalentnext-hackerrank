import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;



class Result {

    /*
     * Complete the 'maxXor' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts following parameters:
     *  1. INTEGER lo
     *  2. INTEGER hi
     *  3. INTEGER k
     */

    public static int maxXor(int lo, int hi, int k) {
    // Write your code here
    int[] arr=new int[hi];
    int index=1,flag=0,val=0;
    for(int i=lo;i<=hi;i++)
    {
        arr[index]=i;
        index++;
    }
    int[] arr2 = new int[index];
    for(int i=1;i<=index;i++)
    {
        for(int j=i+1;j<=index;j++)
        {
            arr2[j]=arr[i]^arr[j];
        }
    }
    for(int i=0;i<index;i++)
    {
        if(arr2[i]<=k)
        {
            flag=1;
            val=arr2[i];

        }
    }
    if(flag==1)
    {
        return val; 
    }
    else{
        return 0;
    }
     
    }
}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int lo = Integer.parseInt(bufferedReader.readLine().trim());

        int hi = Integer.parseInt(bufferedReader.readLine().trim());

        int k = Integer.parseInt(bufferedReader.readLine().trim());

        int result = Result.maxXor(lo, hi, k);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
