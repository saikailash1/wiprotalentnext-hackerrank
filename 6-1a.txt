import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;



class Result {

    /*
     * Complete the 'maxHeight' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts following parameters:
     *  1. INTEGER_ARRAY wallPositions
     *  2. INTEGER_ARRAY wallHeights
     */

    public static int maxHeight(List<Integer> wallPositions, List<Integer> wallHeights) {
    // Write your code here
    int large=0;
    int size=0;
    for(int i=0;i<wallPositions.size()-1;i++)
    {
        size=wallPositions.get(i);
    }
    int[] arr=new int[size];
    List<Integer> arrli = new ArrayList<Integer>(); 
    for(int i=1;i<=size;i++)
    {
        if(wallPositions.get(i)==i)
        {
            arr[i] = wallHeights.get(i);
        }
        else{
            continue;
        }
    }
    for(int i=1;i<=size;i++)
    {
        if(arr[1])
        {
            continue;
        }
        if(arr[i]==0)
        {
            if(arr[i+1]==arr[i-1]||arr[i-1]==arr[i+1])
            {
                arr[i]=arr[i-1];
            }
            else if(arr[i-1]>arr[i+1])
            {
                arr[i] = arr[i-1];
            }
            else if(arr[i+1]==0)
            {
                arr[i]=arr[i-1];
                arr[i] = arr[i]+1;
            }
            else
            {
                continue;
            }

        }
    }
    for(int i=1;i<=size;i++)
    {
        if(arr[i]>large)
        {
            large=arr[i];
        }

    }
    return large;

    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int wallPositionsCount = Integer.parseInt(bufferedReader.readLine().trim());

        List<Integer> wallPositions = IntStream.range(0, wallPositionsCount).mapToObj(i -> {
            try {
                return bufferedReader.readLine().replaceAll("\\s+$", "");
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        })
            .map(String::trim)
            .map(Integer::parseInt)
            .collect(toList());

        int wallHeightsCount = Integer.parseInt(bufferedReader.readLine().trim());

        List<Integer> wallHeights = IntStream.range(0, wallHeightsCount).mapToObj(i -> {
            try {
                return bufferedReader.readLine().replaceAll("\\s+$", "");
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        })
            .map(String::trim)
            .map(Integer::parseInt)
            .collect(toList());

        int result = Result.maxHeight(wallPositions, wallHeights);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
